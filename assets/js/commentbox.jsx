var React = require('react');
// React-bootsrap.
var Button = require('react-bootstrap').Button;
var ControlLabel = require('react-bootstrap').ControlLabel;
var Form = require('react-bootstrap').Form;
var FormControl = require('react-bootstrap').FormControl;
var FormGroup = require('react-bootstrap').FormGroup;
var Label = require('react-bootstrap').Label;
var ListGroup = require('react-bootstrap').ListGroup;
var ListGroupItem = require('react-bootstrap').ListGroupItem;
// Add individual CSS.
require('../css/home.css');

//JSX strips whitespace between lines, so we need to manually add spaces.
var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: '', errMessage: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  // Validate that input has been filled.
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    if (!author) {
      this.setState({errMessage:'Please let us know who you are!'});
      return;
    }
    var text = this.state.text.trim();
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: '', errMessage:''});
  },  
  render: function() {
    return (
      <Form inline className='commentForm' onSubmit={this.handleSubmit}>
        <FormGroup>
        <ControlLabel>Name:</ControlLabel>
	{' '}
        <FormControl
          type='text'
          placeholder='Nice to meet you!'
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        </FormGroup>
	{'    '}
        <FormGroup>
        <ControlLabel>Country:</ControlLabel>
	{' '}
        <FormControl
          type='text'
          placeholder='Where are you from?'
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        </FormGroup>
	{'    '}
        <Button type='submit' value='Post' bsStyle='primary'>
          Share!
	</Button>
        <ControlLabel>{this.state.errMessage}</ControlLabel>
      </Form>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <ListGroupItem header={comment.author} key={comment.id}>
          {comment.text}
	  <Label bsStyle='info'>{comment.ds}</Label>
        </ListGroupItem>
      );
    });
    return (
      <ListGroup className='commentList'>
        <ListGroupItem header='People who had fun' bsStyle='info'>
	  ~ {this.props.data.length} shared ~
	</ListGroupItem>
	{commentNodes}
      </ListGroup>
    );
  }
});

module.exports = React.createClass({
  getInitialState: function() {
    return {
      data: [{id: 0, author: 'Loading', text: 'Comments...'}]
    };
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    comment.ds = 'Saving data ...';
    var newComments = [comment].concat(comments);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });  
  },
  componentDidMount: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
        console.warn(xhr.responseText)
      }.bind(this)
    });
  },
  render: function(){
    return (
     <div className='commentBox'>
       <CommentForm onCommentSubmit={this.handleCommentSubmit} />
       <CommentList data={this.state.data} />
     </div>
   ); 
  }
});
