var React = require('react');
// React-bootsrap.
var Label = require('react-bootstrap').Label;
var ListGroup = require('react-bootstrap').ListGroup;
var ListGroupItem = require('react-bootstrap').ListGroupItem;
var ShareForm = require('./ShareForm');

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <ListGroupItem header={comment.author} key={comment.id}>
          {comment.text}
	  <Label bsStyle='info'>{comment.ds}</Label>
        </ListGroupItem>
      );
    });
    return (
      <ListGroup className='commentList'>
        <ListGroupItem header='People who had fun' bsStyle='info'>
	  ~ {this.props.commentCount} shared ~
	</ListGroupItem>
	{commentNodes}
      </ListGroup>
    );
  }
});

module.exports = React.createClass({
  getInitialState: function() {
    return {
      data: [{id: 0, author: 'Loading', text: 'Comments...'}],
      commentCount: 0,
    };
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    comment.ds = 'Saving data ...';
    var newComments = [comment].concat(comments);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({
	  data: data,
	  commentCount: data.length,
	});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });  
  },
  componentDidMount: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({
	  data: data,
	  commentCount: data.length,
	});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
        console.warn(xhr.responseText)
      }.bind(this)
    });
  },
  render: function(){
    return (
     <div className='commentBox'>
       <ShareForm onCommentSubmit={this.handleCommentSubmit} />
       <CommentList data={this.state.data} commentCount={this.state.commentCount}/>
     </div>
   ); 
  }
});
